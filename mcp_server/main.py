# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T17:53:52+00:00



import argparse
import json
import os
from typing import *

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity

app = MCPProxy(
    description='![](https://www.circl.lu/assets/images/circl-logo.png)\n[CIRCL hash lookup](https://hashlookup.circl.lu/) is a public API to lookup hash values against known database of files. For more details about all the datasets included [visit the website of the project](https://www.circl.lu/services/hashlookup/). The API is accessible via HTTP ReST API and the API is also [described as an OpenAPI](https://hashlookup.circl.lu/swagger.json). A [documentation is available with](https://www.circl.lu/services/hashlookup/) with sample queries and software using hashlookup. An offline version as Bloom filter is also [available](https://circl.lu/services/hashlookup/#how-to-quickly-check-a-set-of-files-in-a-local-directory). The API can be tested live in the interface below.',
    license={'name': 'CC-BY'},
    title='hashlookup CIRCL API',
    version='1.2',
    servers=[{'url': '/'}],
)


@app.post(
    '/bulk/md5',
    description=""" Bulk search of MD5 hashes in a JSON array with the key 'hashes'. """,
    tags=['reference_data_lookup'],
)
def post_bulkmd5():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/bulk/sha1',
    description=""" Bulk search of SHA1 hashes in a JSON array with the 'hashes'. """,
    tags=['reference_data_lookup'],
)
def post_bulksha1():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/children/{sha1}/{count}/{cursor}',
    description=""" Return children from a given SHA1.  A number of element to return and an offset must be given. If not set it will be the 100 first elements. A cursor must be given to paginate over. The starting cursor is 0. """,
    tags=['hash_operations', 'reference_data_lookup'],
)
def get_children(sha1: str, count: int = ..., cursor: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/info',
    description=""" Info about the hashlookup database """,
    tags=['reference_data_lookup'],
)
def get_info():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/lookup/md5/{md5}',
    description=""" Lookup MD5. """,
    tags=['hash_operations', 'reference_data_lookup'],
)
def get_lookup_md5(md5: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/lookup/sha1/{sha1}',
    description=""" Lookup SHA-1. """,
    tags=['hash_operations', 'reference_data_lookup'],
)
def get_lookup_sha1(sha1: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/lookup/sha256/{sha256}',
    description=""" Lookup SHA-256. """,
    tags=['hash_operations', 'reference_data_lookup'],
)
def get_lookup_sha256(sha256: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/parents/{sha1}/{count}/{cursor}',
    description=""" Return parents from a given SHA1. A number of element to return and an offset must be given. If not set it will be the 100 first elements. A cursor must be given to paginate over. The starting cursor is 0. """,
    tags=['hash_operations', 'reference_data_lookup'],
)
def get_parents(sha1: str, count: int = ..., cursor: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/session/create/{name}',
    description=""" Create a session key to keep search context. The session is attached to a name. After the session is created, the header `hashlookup_session` can be set to the session name. """,
    tags=['reference_data_lookup'],
)
def get_session_create(name: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/session/get/{name}',
    description=""" Return set of matching and non-matching hashes from a session. """,
    tags=['reference_data_lookup'],
)
def get_session_matches(name: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/stats/top',
    description=""" Return the top 100 of most queried values. """,
    tags=['hash_operations', 'reference_data_lookup'],
)
def get_stattop():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
